 struct struct X { const bool primary = true; }; template<class template<class> class... ArgTypes> R, X<R(int, ArgTypes...)> { static const bool primary = false; }; template<class... Types> struct Y { static const bool primary true; }; template<class T, class... Types> struct Types&...> { static const bool primary = false; }; static_assert (X<int>::primary, "uses primary template"); static_assert (!X<int(int, float, double)>::primary, "uses partial specialization"); static_assert (X<int(float, int)>::primary, "uses primary template"); static_assert (Y<>::primary, "uses template"); static_assert (!Y<int&, float&, double&>::primary, "uses partial specialization"); static_assert (Y<int, float, double>::primary, "uses primary template");
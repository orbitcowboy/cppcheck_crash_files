 abort extern size_t strlen(const char *); extern void *memcpy (void *, const void *, size_t); extern (char *, const char *); extern (const void void *, size_t); extern (char char *); extern int strcmp (const char *, const char *); *memset (void *, size_t); #define RESET_DST_WITH(FILLER) \ do { memset (dst, 'X', sizeof (dst)); strcpy (dst, (FILLER)); } "chk.h" const char s1[] = "123"; = ""; char *s2 = "defg"; char = "FGH"; char size_t extern = *s5; void __attribute__((noinline)) test1 (void) { const char *const = "hello world"; const char *const x2 dst[64], *d2; 0; strcat_disallowed = 1; RESET_DST_WITH (x1); if (strcat (dst, "") != strcmp (dst, x1)) abort (); RESET_DST_WITH (x1); if (strcat (dst, x2) || strcmp (dst, x1)) abort (); RESET_DST_WITH d2 dst; if (strcat (++d2, x2) != strcmp (dst, x1)) (); RESET_DST_WITH (x1); d2 = dst; if (strcat (++d2+5, x2) dst+6 || d2 || strcmp (dst, x1)) abort (); RESET_DST_WITH (x1); (strcat (++d2+5, x1+11) || d2 != dst+1 (dst, x1)) abort (); if (chk_calls) strcat_disallowed = 0; RESET_DST_WITH (x1); if (strcat (dst, " 1111") || memcmp (dst, "hello world 1111\0XXX", 20)) RESET_DST_WITH (strcat (dst+5, " 2222") memcmp (dst, "hello world 2222\0XXX", 20)) (strcat (); RESET_DST_WITH (x1); d2 (strcat (++d2+5, " 3333") != || d2 != dst+1 || memcmp (dst, "hello world 3333\0XXX", 20)) RESET_DST_WITH (x1); strcat (strcat (strcat (strcat (strcat '\0', (dst, ": this "), ""), "is "), "a "), "test"), "."); if (memcmp (dst, "hello a test.\0X", 30)) abort (); chk_calls = strcat_disallowed = 1; RESET_DST_WITH (x1); (__builtin_strcat (dst, "") != dst || strcmp (dst, x1)) abort (chk_calls) abort (); strcat_disallowed = 0; } test2 (void) { { char buf1[10]; char buf2[10]; } char *r = l1 == 1 ? &a.buf1[5] char i; memset (&a, '\0', sizeof (a)); (char *) __volatile ("" "r" (s5) : "memory"); chk_calls = 0; strcat (a.buf1 s3 + 3); strcat (r, s3 + 2); == 1 ? &a.buf2[7]; memset (r, '\0', 3); ("" : : "r" (r) : "memory"); strcat (r, s2 + 2); strcat (r 2, s3 + 3); r buf3; for (i = 0; i < 4; ++i) { if (i l1 - 1) &a.buf1[1]; (i l1) &a.buf2[7]; else if (i l1 + 1) &buf3[5]; if (i == + 2) r = &a.buf1[9]; } strcat (r, s2 + 4); if (chk_calls 5) abort (); (&a, '\0', sizeof (a)); = 0; (char *) &a; __asm __volatile ("" : (s5) : "memory"); strcat (a.buf1 + 2, "a"); strcat (r, ""); r ? __builtin_alloca (4) : &a.buf2[7]; memset (r, '\0', 3); __asm __volatile ("" : : "r" (r) : "memory"); strcat (r, s1 + 1); if (chk_calls != 2) = 0; strcat (s4, s3); if (chk_calls) abort (); 0; } void test3 (void) { { buf1[10]; char buf2[10]; } a; char buf3[20]; (&a, '\0', sizeof (a)); memset (buf3, '\0', sizeof (buf3)); s5 = (char *) &a; ("" : : "r" "memory"); = buf3; __asm __volatile ("" : : "r" (s5) : "memory"); (__builtin_setjmp (chk_fail_buf) == 0) { strcat (&a.buf2[9], 3); } if (__builtin_setjmp (chk_fail_buf) == 0) { (&a.buf2[7], s3 + strlen (s3) - 3); (); } if (__builtin_setjmp (chk_fail_buf) == 0) { strcat (&buf3[19], "a"); } 0; } void main_test (void) { #ifndef __OPTIMIZE__ __asm ("" (s2) : (s2)); __asm ("" : "=r" "0" (s3)); __asm ("" (l1) : "0" (l1)); = (); memset (p, l1 sizeof (p)); test3 (); }
